# 编码的认识
"""

GBK：只包含本国文字（以及英文字母，数字，特殊字符）与0101010对应关系。
GBK的知识扩展

经实际测试和查阅文档，GBK是采用单双字节变长编码，英文使用单字节编码，完全兼容ASCII字符编码，中文部分采用双字节编码。

对于ASCII码中的内容，GBK完全沿用的ASCII码，所以一个英文字母（数字,特殊字母）用一个字节表示，而对于中文来说，一个中文用两个字节表示。

# 思考：python中一个字符串为 'a太白'，那么如果用GBK码编码，这个字符串占几个字节？

#一个英文用一个字节，一个中文用两个字节，所以：'a太白' 如果是GBK编码占5个字节。

但是GBK只包含中文，不能包含其他文字，言外之意，GBK编码是不能识别其他国家的文字的，举个例子：如果你购买了一个日本的游戏盘，在用中国的计算机去玩，那么此时中国的计算机只有gbk编码和ascii码，那么你在玩游戏的过程中，只要出现日本字，那就会出错或者出现乱码.......

但是，随着全球化的普及，由于网络的连通，以及互联网产品的共用（不同国家的游戏，软件，建立联系等），各个国家都需要产生各种交集，此时急需一个密码本：要包含全世界所有的文字与二进制0101010的对应关系，所以创建了万国码：

Unicode： 包含全世界所有的文字与二进制0101001的对应关系。
Unicode的起源以及知识扩展

通用字符集（Universal Character Set, UCS）是由ISO制定的ISO 10646（或称ISO/IEC 10646）标准所定义的标准字符集。UCS-2用两个字节编码，UCS-4用4个字节编码。

起初：Unicode规定一个字符用两个字节表示：

　　英文:  a b c  六个字节   一个英文2个字节

　　中文   中国   四个字节  一个中文用2个字节

但是这种也不行，这种最多有65535种可能，可是中国文字有9万多，所以改成一个字符用四个字节表示：.

　　a  01000001 01000010 01000011 00000001

　　b  01000001 01000010 01100011 00000001

　　中 01001001 01000010 01100011 00000001

这样虽然解决了问题，但是又引出一个新的问题就是原本a可以用1个字节表示，却必须用4个字节，这样非常浪费资源，所以对Uniocde进行升级。

UTF-8:包含全世界所有的文字与二进制0101001的对应关系（最少用8位一个字节表示一个字符）。
UTF-8的简单介绍
复制代码

UTF-8：是对Unicode编码的压缩和优化，他不再使用最少使用2个字节，而是将所有的字符和符号进行分类：ascii码中的内容用1个字节保存、欧洲的字符用2个字节保存，东亚的字符用3个字节保存...

UTF-16: 每个字符最少占16位.

GBK: 每个字符占2个字节, 16位.　

复制代码

UTF-8 ：最少用8位数,去表示一个字符.

　　　　　　英文:           8位,1个字节表示.

　　　　欧洲文字:         16位,两个字节表示一个字符.

　　中文,亚洲文字:       24位,三个字节表示.

# 思考：python中一个字符串为 'a太白'，那么如果用UTF-8码编码，这个字符串占几个字节？

#一个英文用一个字节，一个中文用三个个字节，所以：'a太白' 如果是UTF-8编码占7个字节。


"""