# 深浅copy

'''
先问问大家，什么是拷贝？拷贝是音译的词，其实他是从copy这个英文单词音译过来的，那什么是copy？ copy其实就是复制一份，也就是所谓的抄一份。
深浅copy其实就是完全复制一份，和部分复制一份的意思。
'''

# 1，先看赋值运算。
l1 = [1, 2, 3, ['barry', 'alex']]
l2 = l1

l1[0] = 111
print(l1)  # [111, 2, 3, ['barry', 'alex']]
print(l2)  # [111, 2, 3, ['barry', 'alex']]

l1[3][0] = 'wusir'
print(l1)  # [111, 2, 3, ['wusir', 'alex']]
print(l2)  # [111, 2, 3, ['wusir', 'alex']]

'''
对于赋值运算来说，l1与l2指向的是同一个内存地址，所以他们是完全一样的，在举个例子，比如张三李四合租在一起，那么对于客厅来说，他们是公用的，张三可以用，
李四也可以用，但是突然有一天张三把客厅的的电视换成投影了，那么李四使用客厅时，想看电视没有了，而是投影了，对吧？l1,l2指向的是同一个列表，
任何一个变量对列表进行改变，剩下那个变量在使用列表之后，这个列表就是发生改变之后的列表。
'''

# 2，浅拷贝copy。
print(' 浅拷贝copy '.center(20, '#'))
# 同一代码块下：
l1 = [1, '刘飞', True, (1, 2, 3), [22, 33]]
l2 = l1.copy()
print(id(l1), id(l2))  # 2810093795264 2810093794944
print(id(l1[1]), id(l2[1]))  # 1687357470448 1687357470448
print(id(l1[-2]), id(l2[-2]))  # 2539087008960 2539087008960
print(id(l1[-1]), id(l2[-1]))  # 2455853380800 2455853380800

# 不同代码块
'''
>>> l1 = [1, '刘飞', True, (1,2,3), [22, 33]]
>>> l2 = l1.copy()
>>> print(id(l1), id(l2))
1492682979776 1492682979840
>>> print(id(l1[-2]), id(l2[-2]))
1492682740736 1492682740736
>>> print(id(l1[-1]), id(l2[-1]))
1492682702720 1492682702720
'''

# 对于浅copy来说，只是在内存中重新创建了开辟了一个空间存放一个新列表，但是新列表中的元素与原列表中的元素是公用的。

# 3，深拷贝deepcopy
print(' 深copy '.center(20, '#'))
import copy
l1 = [1, '刘飞', True, (1, 2, 3), [22, 33]]
l2 = copy.deepcopy(l1)
print(id(l1), id(l2))  # 2323093626816 2323095783232
print(id(l1[1]), id(l2[1]))  # 2901365012208 2901365012208
print(id(l1[-2]), id(l2[-2]))  # 2323097007616 2323097007616
print(id(l1[-1]), id(l2[-1]))  # 2323095783616 2323092669312

# 对于深copy来说，列表是在内存中重新创建的，列表中可变的数据类型是重新创建的，列表中的不可变的数据类型是公用的。
# 元组是不可变的。所以还是引用之前的

print()
print(' 相关面试题 '.center(20, '#'))

l1 = [1, 2, 3, 4, ['alex']]
l2 = l1[::]
l1[-1].append(666)
print(l2)  # [1, 2, 3, 4, ['alex', 666]]
